server {
  listen 80; # Nginx écoute sur HTTP, Fly.io gère la terminaison SSL
  server_name localhost; # Ou votre nom de domaine réel

  root /usr/share/nginx/html;
  index index.html index.htm;

  location / {
    try_files $uri $uri/ /index.html;
  }

  # Proxy inverse pour le backend PHP
  location /api/ {
    # Gérer les en-têtes CORS
    add_header 'Access-Control-Allow-Origin' 'https://akara-frontend.fly.dev' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With' always;
    add_header 'Access-Control-Allow-Credentials' 'true' always;
    add_header 'Access-Control-Max-Age' '86400' always;

    # Gérer les requêtes OPTIONS (pré-vol CORS)
    if ($request_method = 'OPTIONS') {
      add_header 'Content-Type' 'text/plain charset=UTF-8';
      add_header 'Content-Length' '0';
      return 204; # Utiliser 204 No Content pour les OPTIONS
    }

    # Transmettre la requête au backend PHP via le nom de domaine interne de Fly.io
    proxy_pass http://akara-backend.internal/api/; # Utiliser le nom interne de l'application backend
    proxy_set_header Host akara-backend.internal; # Définir l'en-tête Host pour le backend
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
  }

  # Gérer efficacement les assets avec des en-têtes de cache
  location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc|css|js)$ {
    expires 1M;
    access_log off;
    add_header Cache-Control "public";
  }
}